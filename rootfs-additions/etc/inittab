#
# Busybox inittab file - 
# if busybox (e.g. /sbin/init/ is the init file (e.g. can't execute /init or the kernel was run with "rdinit=/sbin/init"), 
# then busybox will parse this file according to its rules.
# It will also do so if /init runs and exec /sbin/busybox, which is what we expect at this phase.
# 
# We can use this file if we have ttys in order to provide and get rid of the annoying getty messages, e.g. if there is no mdev.
# if this is what bothers you, and you are interested in a single user mode, you can also add "single" to the command line.
# Here, since we don't bother to introduce the concept of "runlevels" we virtually do the same thing.
#
# There are plenty of examples saying how this works, so we will just illustrate the most trivial concepts
#
# You can also add here your own services if you want
# e.g., if you wanted to have the banner - you could just cat here, and decide when to run it etc.
#
# You should play around with it and learn about the order of execution which we will not explain here.
# What you should have in mind, is that the device creation etc. is not how you would want to do it in a real system.
# You are likely to want to execute an init script, and then exec busybox init at its end (instead of the shell as we did before!), so that it will take care of respawning your shells on each tty.
#
# Order of execution: sysinit, wait,    once, (askfirst, respawn)
#                            ^                 ^ 
#                     synchrounous   asynchrounous (no waits here)
#
# If you followed our build up process, you can see that now most of the initializations, mounts, node creation, etc,
# are no longer done here (it was a demonstration of a deliberate bad practice!). They are expected to be made by /init
# before exec-ing to busybox's init (which parses execute the commands in this file)
#


# Run the splash screen (add a --timeout argument if you would like to, othervwise chvt or run /extra/progress/splash from another place
::once:/usr/bin/psplash


# We respawn the shell on some of the ttys - this is deliberate to show some concepts.
# Note that we removed the ::respawn/bin/sh we had before. All of the respawn processes will be started by order, not waiting to each other so we are good
ttyS0::respawn:/bin/sh
ttyS1::respawn:/bin/sh
tty1::respawn:/bin/sh
tty2::respawn:/extra/getty-autologin.sh /dev/tty2
tty3::respawn:/bin/sh
tty4::respawn:/bin/sh

tty42::respawn:/bin/sh



